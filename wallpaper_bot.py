# =============================================================================
#    *** ุจูุช YourWallAR - ุงูุฅุตุฏุงุฑ 6.0 (ุงูุฅุฑุณุงู ุจุงูุฑุงุจุท - ุฅุตูุงุญ ุงูุชุงูู ุขูุช) ***
#
#  (v6.0) ุงููุดููุฉ: ุชุญููู/ุถุบุท/ุฑูุน ูุณุจุจ (Timeout) ุตุงูุช.
#  (v6.0) ุงูุญู: ูุง ูููู ุจุชุญููู ุฃู ุถุบุท ุฃู ุดูุก.
#         - 1. ูุฑุณู ุฑุงุจุท ุงูุตูุฑุฉ (URL) ูุจุงุดุฑุฉ ุฅูู ุชูููุฌุฑุงู.
#         - 2. ุฎูุงุฏู ุชูููุฌุฑุงู ุงููููุฉ ุชุชููู ุนูููุฉ ุงูุชุญููู.
#         - ูุฐุง ูุญู ูุดููุฉ ุงูุชุงูู ุขูุช 100%.
# =============================================================================

import requests
import os
import sys
import datetime
import random
# (v6.0) ุชู ุญุฐู 'Pillow' ู 'io' ูุฃููุง ูู ูููู ุจุงูุถุบุท

# --- [1] ุงูุฅุนุฏุงุฏุงุช ูุงูููุงุชูุญ ุงูุณุฑูุฉ (3 ููุงุชูุญ ูุทููุจุฉ) ---
try:
    BOT_TOKEN = os.environ['BOT_TOKEN']
    CHANNEL_USERNAME = os.environ['CHANNEL_USERNAME'] # ูุฌุจ ุฃู ูุจุฏุฃ ุจู @
    PEXELS_API_KEY = os.environ['PEXELS_API_KEY']
    
except KeyError as e:
    print(f"!!! ุฎุทุฃ: ูุชุบูุฑ ุงูุจูุฆุฉ ุงูุฃุณุงุณู ุบูุฑ ููุฌูุฏ: {e}")
    sys.exit(1)

TELEGRAM_API_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"
PEXELS_API_URL = "https://api.pexels.com/v1/search"
TRANSLATE_API_URL = "https://api.mymemory.translated.net/get"

# --- [2] ุงูุฏูุงู ุงููุณุงุนุฏุฉ (ุฅุฑุณุงู ุงูุฑุณุงุฆู - v6.0) ---

def post_photo_by_url(image_url, text_caption):
    """(v6.0 - ุงูุทุฑููุฉ ุงูุฃุณุฑุน) ุฅุฑุณุงู ุฑุงุจุท ุงูุตูุฑุฉ ูุจุงุดุฑุฉ ุฅูู ุชูููุฌุฑุงู."""
    print(f"... (v6.0) ุฌุงุฑู ุฅุฑุณุงู (ุงูุฑุงุจุท) ุฅูู ุชูููุฌุฑุงู: {image_url}")
    url = f"{TELEGRAM_API_URL}/sendPhoto"
    caption_to_send = text_caption if text_caption.strip() else None
    
    # (v6.0) ูุฑุณู 'image_url' ูุจุงุดุฑุฉ ูู ุญูู 'photo'
    payload = {
        'chat_id': CHANNEL_USERNAME,
        'photo': image_url, # <-- ูุฐุง ูู ุงูุชุบููุฑ ุงูุฃูู
        'caption': caption_to_send,
        'parse_mode': 'HTML'
    }
    
    response_telegram = None
    try:
        response_telegram = requests.post(url, json=payload, timeout=60)
        response_telegram.raise_for_status()
        print(">>> (v6.0) ุชู ุฅุฑุณุงู (ุฑุงุจุท ุงูุฎูููุฉ) ุจูุฌุงุญ!")
        
    except requests.exceptions.HTTPError as e:
        error_message = f"HTTP Error: {e.response.status_code} - {e.response.text}"
        print(f"!!! (v6.0) ูุดู ุฅุฑุณุงู (ุฑุงุจุท ุงูุฎูููุฉ): {error_message}")
        post_text_to_telegram(f"๐จ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฅุฑุณุงู ุงูุฎูููุฉ.\n\n<b>ุงูุณุจุจ:</b>\n<pre>{error_message}</pre>")
    except Exception as e:
        error_message = f"Error: {str(e)}"
        print(f"!!! (v6.0) ูุดู ุฅุฑุณุงู (ุฑุงุจุท ุงูุฎูููุฉ): {error_message}")
        post_text_to_telegram(f"๐จ ุญุฏุซ ุฎุทุฃ ูุงุฏุญ ุฃุซูุงุก ูุนุงูุฌุฉ ุงูุฎูููุฉ.\n\n<b>ุงูุณุจุจ:</b>\n<pre>{error_message}</pre>")


def post_text_to_telegram(text_content):
    """(ุขูู) ุฅุฑุณุงู ุฑุณุงูุฉ ุฎุทุฃ ูุตูุฉ"""
    print(f"... ุฌุงุฑู ุฅุฑุณุงู (ุฑุณุงูุฉ ุฎุทุฃ) ุฅูู {CHANNEL_USERNAME} ...")
    url = f"{TELEGRAM_API_URL}/sendMessage"
    payload = { 'chat_id': CHANNEL_USERNAME, 'text': text_content, 'parse_mode': 'HTML' }
    try:
        response = requests.post(url, json=payload, timeout=60)
        response.raise_for_status()
    except requests.exceptions.RequestException as e:
        print(f"!!! ูุดู ุฅุฑุณุงู (ุฑุณุงูุฉ ุงูุฎุทุฃ ุงููุตูุฉ) ุฃูุถุงู: {e}")

# --- [3] ุฏุงูุฉ ุงูุชุฑุฌูุฉ (ูู ุชุชุบูุฑ) ---

def translate_text(text_to_translate):
    if not text_to_translate: return None
    print(f"... ุฌุงุฑู ุชุฑุฌูุฉ ุงููุตู: '{text_to_translate}'")
    params = {'q': text_to_translate, 'langpair': 'en|ar'}
    try:
        response = requests.get(TRANSLATE_API_URL, params=params, timeout=10)
        response.raise_for_status()
        data = response.json()
        if data['responseStatus'] == 200:
            translated = data['responseData']['translatedText']
            print(f">>> ุชู ุงูุชุฑุฌูุฉ: '{translated}'")
            return translated
        else:
            return text_to_translate
    except Exception as e:
        print(f"!!! ูุดูุช ุงูุชุฑุฌูุฉ: {e}. ุงูุนูุฏุฉ ุฅูู ุงูุฅูุฌููุฒูุฉ.")
        return text_to_translate

# --- [4] ุฏุงูุฉ ุฌูุจ ุงูุจูุงูุงุช (v6.0 - ุฌูุจ ุงูุฑุงุจุท ุงูููุงุณุจ) ---

def get_random_wallpaper(search_query, orientation):
    print(f"... ุฌุงุฑู ุฌูุจ ุฎูููุฉ ูู: '{search_query}' (ุงูุงุชุฌุงู: {orientation})")
    headers = {'Authorization': PEXELS_API_KEY}
    params = {'query': search_query, 'orientation': orientation, 'per_page': 1, 'page': random.randint(1, 100)}
    
    response_api = None
    try:
        response_api = requests.get(PEXELS_API_URL, headers=headers, params=params, timeout=30)
        response_api.raise_for_status()
        data = response_api.json()
        
        if not data.get('photos') or len(data['photos']) == 0:
            error_msg = f"No results found for query: {search_query} / {orientation}"
            print(f"!!! ูุดู ุฌูุจ ุงูุจูุงูุงุช: {error_msg}")
            return None, None, None, None, error_msg

        photo = data['photos'][0]
        
        # (v6.0) ุงูุชุบููุฑ ุงูุฃูู: ูุฎุชุงุฑ ุงูุฌูุฏุฉ ุงูุชู ุณูุฑุณููุง ูุฑุงุจุท
        # 'large' ูู ุฃูุถู ุชูุงุฒู (ููุณ ุถุฎูุงู ูููุณ ุตุบูุฑุงู)
        image_url_source = photo['src']['large'] 
        
        description_en = photo.get('alt')
        photographer_name = photo['photographer']
        photographer_url = photo['photographer_url']
        
        description_ar = translate_text(description_en)
        
        print(">>> ุชู ุฌูุจ ุงูุตูุฑุฉ ุจูุฌุงุญ. ุฌุงุฑู ุจูุงุก ุงูุฑุณุงูุฉ...")
        return image_url_source, description_ar, photographer_name, photographer_url, None
        
    except requests.exceptions.HTTPError as e:
        error_details = f"HTTP Error: {e.response.status_code} ({e.response.reason})"
        print(f"!!! ูุดู ุฌูุจ ุงูุจูุงูุงุช ูู Pexels: {error_details} - {e.response.text}")
        return None, None, None, None, error_details
    except Exception as e:
        error_details = f"General Error: {str(e)}"
        print(f"!!! ูุดู ุฌูุจ ุงูุจูุงูุงุช ูู Pexels: {error_details}")
        return None, None, None, None, error_details

# --- [5] ุฏุงูุฉ ุชูุณูู ุงูุฑุณุงูุฉ (ูู ุชุชุบูุฑ) ---

def format_telegram_post(title, description, photographer_name, photographer_url):
    caption_parts = []
    if title: caption_parts.append(f"<b>{title}</b>")
    if description: caption_parts.append(f"<i>ยซ{description.capitalize()}ยป</i>")
    if photographer_name: caption_parts.append(f"๐ท <b>ุจูุงุณุทุฉ:</b> <a href='{photographer_url}'>{photographer_name}</a>")
    final_caption = "\n\n".join(caption_parts)
    return final_caption

# --- [6] ุงูุชุดุบูู ุงูุฑุฆูุณู (ูู ูุชุบูุฑ ุนู v5.1) ---
def main():
    print("==========================================")
    print(f"ุจุฏุก ุชุดุบูู (v6.0 - ุจูุช YourWallAR - ุงูุฅุฑุณุงู ุจุงูุฑุงุจุท)...")
    
    # (ุงูุฌุฏูู ุจุชูููุช UTC ููุทุงุจู ููู YML)
    SCHEDULE = {
        6: {'task': 'phone', 'query': 'nature wallpaper', 'orientation': 'portrait', 'title': '๐ฑ ุฎูููุฉ ูุงุชู (Android/iOS)'},
        12: {'task': 'tablet', 'query': 'minimalist wallpaper', 'orientation': 'landscape', 'title': '๐ป ุฎูููุฉ ุขูุจุงุฏ/ุชุงุจูุช'},
        18: {'task': 'pc', 'query': '4k wallpaper', 'orientation': 'landscape', 'title': '๐ฅ๏ธ ุฎูููุฉ ููุจููุชุฑ (PC/Mac)'}
    }
    
    now_utc = datetime.datetime.now(datetime.timezone.utc)
    current_hour_utc = now_utc.hour
    
    print(f"ุงูููุช ุงูุญุงูู (UTC): {now_utc.strftime('%Y-%m-%d %H:%M:%S')}")
    
    if current_hour_utc in SCHEDULE:
        task = SCHEDULE[current_hour_utc]
        print(f">>> (ููุช ูุฌุฏูู: {current_hour_utc}:00 UTC) - ุฌุงุฑู ุชุดุบูู ูููุฉ: '{task['task']}'")
        
        image_url, description, photo_name, photo_url, error_msg = get_random_wallpaper(
            task['query'], 
            task['orientation']
        )
        
        if image_url: # (ุฅุฐุง ูุฌุญ ุฌูุจ ุงูุจูุงูุงุช)
            caption = format_telegram_post(task['title'], description, photo_name, photo_url)
            # (v6.0) ุงุณุชุฎุฏุงู ุงูุฏุงูุฉ ุงูุฌุฏูุฏุฉ ุงูุชู ุชุฑุณู ุงูุฑุงุจุท
            post_photo_by_url(image_url, caption)
        else:
            # (ูุดู ุฌูุจ ุงูุจูุงูุงุช ูู Pexels)
            print(f"!!! ูุดู ุฌูุจ ุงูุตูุฑุฉ. ุงูุณุจุจ: {error_msg}")
            post_text_to_telegram(f"๐จ ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุฌูุจ ุฎูููุฉ ({task['task']}).\n\n<b>ุงูุณุจุจ ุงูููู:</b>\n<pre>{error_msg}</pre>")
            
    else:
        print(f"... (ุงูููุช: {current_hour_utc}:00 UTC) - ูุง ุชูุฌุฏ ูููุฉ ูุฌุฏููุฉ ููุฐุง ุงูููุช. ุชุฎุทู.")

    print("==========================================")
    print("... ุงูุชููุช ุงููููุฉ.")

if __name__ == "__main__":
    main()

